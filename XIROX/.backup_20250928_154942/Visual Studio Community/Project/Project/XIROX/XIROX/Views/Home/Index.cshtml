@model XIROX.Models.HomeViewModel
@{
    ViewData["Title"] = "XIROX";
    Layout = "_Layout";
}

<!-- Intro Overlay with Red Rain and XIROX Title -->
<div id="intro-overlay" role="dialog" aria-modal="true" aria-label="Intro animation">
    <canvas id="rain-canvas"></canvas>
    <div id="intro-xirox" aria-hidden="true">
        <span>X I R O X</span>
    </div>
</div>

<main class="container main-content" id="main-content-xirox" style="opacity:0;">

    <!-- HERO -->
    <section class="profile-section-xirox" aria-label="Profile">
        <div class="avatar-ring">
            <img src="~/images/Photo.png" alt="XIROX profile" class="profile-image-xirox" />
        </div>

        <h1 class="xirox-glow-title" id="target-xirox-title">X I R O X</h1>

        <p class="hero-typed" aria-live="polite">
            <span id="typed-line"></span><span class="caret" aria-hidden="true"></span>
        </p>

        <div class="cta-row">
            <a class="btn btn-neon" href="@Model.TelegramUrl" target="_blank" rel="noopener">Join Telegram</a>
            <a class="btn outline btn-ghost" asp-controller="Home" asp-action="Contact">Contact Me</a>
        </div>
    </section>

    <!-- SOCIAL GRID -->
    <section class="social-icons" aria-label="Social links">
        <a href="@Model.TelegramUrl" target="_blank" rel="noopener" class="social-link tilt" aria-label="Telegram" data-tilt>
            <img src="~/images/social/icons8-telegram-94.png" class="social-img" alt="Telegram" />
        </a>

        <a href="@Model.WhatsAppUrl" target="_blank" rel="noopener" class="social-link tilt" aria-label="WhatsApp" data-tilt>
            <img src="~/images/social/icons8-whatsapp-94.png" class="social-img" alt="WhatsApp" />
        </a>

        <a href="@Model.TikTokUrl" target="_blank" rel="noopener" class="social-link tilt" aria-label="TikTok" data-tilt>
            <img src="~/images/social/icons8-tiktok-94.png" class="social-img" alt="TikTok" />
        </a>

        <a href="@Model.InstagramUrl" target="_blank" rel="noopener" class="social-link tilt" aria-label="Instagram" data-tilt>
            <img src="~/images/social/icons8-instagram-94.png" class="social-img" alt="Instagram" />
        </a>

        <a href="@Model.YouTubeUrl" target="_blank" rel="noopener" class="social-link tilt" aria-label="YouTube" data-tilt>
            <img src="~/images/social/icons8-youtube-94.png" class="social-img" alt="YouTube" />
        </a>

        <!-- === NEW: Discord (همان کلاس‌ها و استایل بقیه) === -->
        <a href="https://discord.gg/xiroxff" target="_blank" rel="noopener"
           class="social-link tilt" aria-label="Discord" title="Zyrox FF (Discord)" data-tilt>
            <img src="~/images/social/icons8-discord-94.png" class="social-img" alt="Discord" />
        </a>
        <!-- === /Discord === -->
    </section>

    <hr class="xirox-divider" />

    <!-- STATS STRIP -->
    <section class="stats-strip separated reveal" aria-label="Stats">

        <!-- Total Visits -->
        <div class="stat compact" id="stat-card-visits">
            <div class="stat-head">
                <svg class="stat-ico" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M12 5c5.5 0 9.5 4.5 10.8 6.3a1 1 0 010 1.4C21.5 14.5 17.5 19 12 19S2.5 14.5 1.2 12.7a1 1 0 010-1.4C2.5 9.5 6.5 5 12 5zm0 10a4 4 0 100-8 4 4 0 000 8z"></path>
                </svg>
                <span class="stat-title">Total Visits</span>
            </div>
            <div class="stat-body">
                <div class="count-roller" id="visits-roller" aria-live="polite">0</div>
            </div>
        </div>

        <!-- Satisfied Users (compact v2) -->
        <div class="stat compact satisfy-compact" id="stat-card-satisfaction">
            <div class="stat-head">
                <svg class="stat-ico" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M12 2a10 10 0 1010 10A10.011 10.011 0 0012 2zm-3.5 7A1.5 1.5 0 119 7.5 1.5 1.5 0 018.5 9zm8 0A1.5 1.5 0 1117 7.5 1.5 1.5 0 0116.5 9zM12 18a6 6 0 01-5.196-3h10.392A6 6 0 0112 18z"></path>
                </svg>
                <span class="stat-title">Satisfied Users</span>
            </div>
            <div class="stat-body satisfy-grid">
                <!-- Left (dislike) -->
                <div class="col-left">
                    <button id="btn-dislike" class="vote-btn" type="button" aria-label="Dislike" title="Dislike">
                        <span class="ico-img ico-down" aria-hidden="true"></span>
                    </button>
                    <span class="vote-badge down" id="badge-down">
                        <span class="count-roller" id="down-roller">-0</span>
                    </span>
                </div>

                <!-- Center (smaller face) -->
                <div class="col-center">
                    <svg class="face" id="face-emoji" viewBox="0 0 72 72" aria-hidden="true">
                        <defs>
                            <filter id="fglow" x="-50%" y="-50%" width="200%" height="200%">
                                <feDropShadow dx="0" dy="0" stdDeviation="3" flood-color="#ff2323" flood-opacity=".6" />
                            </filter>
                        </defs>
                        <circle cx="36" cy="36" r="32" fill="#0b0b0b" stroke="#ff2323" stroke-width="2" filter="url(#fglow)" />
                        <circle class="eye" cx="25" cy="30" r="4" fill="#fff" />
                        <circle class="eye" cx="47" cy="30" r="4" fill="#fff" />
                        <g class="group-happy">
                            <path class="mouth" d="M22 44 Q36 54 50 44" stroke="#ff4a4a" stroke-width="3" fill="none" stroke-linecap="round" />
                        </g>
                        <g class="group-sad">
                            <path class="mouth" d="M22 50 Q36 40 50 50" stroke="#ff4a4a" stroke-width="3" fill="none" stroke-linecap="round" />
                        </g>
                    </svg>
                </div>

                <!-- Right (like) -->
                <div class="col-right">
                    <span class="vote-badge up" id="badge-up">
                        <span class="count-roller" id="up-roller">+0</span>
                    </span>
                    <button id="btn-like" class="vote-btn" type="button" aria-label="Like" title="Like">
                        <span class="ico-img ico-up" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Uptime -->
        <div class="stat compact" id="stat-card-age">
            <div class="stat-head">
                <svg class="stat-ico" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M7 2v2H5a3 3 0 00-3 3v10a3 3 0 003 3h14a3 3 0 003-3V7a3 3 0 00-3-3h-2V2h-2v2H9V2H7zm12 6H5v9a1 1 0 001 1h12a1 1 0 001-1V8zM13 9v5h4v-2h-2V9h-2z"></path>
                </svg>
                <span class="stat-title">Uptime</span>
            </div>
            <div class="stat-body age-grid">
                <div><span class="age-num" id="age-years">0</span><span class="age-unit">years</span></div>
                <div><span class="age-num" id="age-months">0</span><span class="age-unit">months</span></div>
                <div><span class="age-num" id="age-days">0</span><span class="age-unit">days</span></div>
                <div><span class="age-num" id="age-hours">0</span><span class="age-unit">hours</span></div>
                <div><span class="age-num" id="age-mins">0</span><span class="age-unit">mins</span></div>
                <div><span class="age-num" id="age-secs">0</span><span class="age-unit">secs</span></div>
            </div>
        </div>

    </section>
</main>

<!-- Command Palette -->
<div id="cmdk" aria-hidden="true">
    <div class="cmdk-panel" role="dialog" aria-modal="true" aria-label="Quick actions">
        <input id="cmdk-input" type="text" placeholder="Type: Home, About, Contact, Telegram..." autocomplete="off" />
        <ul id="cmdk-list" role="listbox">
            <li data-url="@Url.Action("Index", "Home")">Home</li>
            <li data-url="@Url.Action("About", "Home")">About</li>
            <li data-url="@Url.Action("Contact", "Home")">Contact</li>
            <li data-url="@Url.Action("Privacy", "Home")">Privacy</li>
            <li data-url="@Model.TelegramUrl">Telegram</li>
            <li data-url="@Model.InstagramUrl">Instagram</li>
            <li data-url="@Model.YouTubeUrl">YouTube</li>
        </ul>
        <div class="cmdk-help">Press Esc to close</div>
    </div>
</div>

@section Scripts {
    <!-- Red Rain (intro) -->
    <script>
        (function(){
          const canvas=document.getElementById('rain-canvas'); if(!canvas) return;
          const ctx=canvas.getContext('2d');
          let dpr=Math.max(1,Math.min(2,window.devicePixelRatio||1));
          let w=0,h=0,running=true,drops=[];
          function resize(){ w=innerWidth; h=innerHeight; canvas.width=Math.floor(w*dpr); canvas.height=Math.floor(h*dpr); canvas.style.width=w+'px'; canvas.style.height=h+'px'; ctx.setTransform(dpr,0,0,dpr,0,0); }
          function make(){ drops=[]; const c=Math.floor((Math.max(w,h)/15)); for(let i=0;i<c;i++) drops.push({x:Math.random()*w,y:Math.random()*h,l:Math.random()*18+16,xs:Math.random()*0.9-0.45,ys:Math.random()*8+6});}
          function draw(){ if(!running) return; ctx.clearRect(0,0,w,h); ctx.globalAlpha=.48; ctx.strokeStyle='#ff2323'; ctx.lineWidth=2.2; for(const r of drops){ ctx.beginPath(); ctx.moveTo(r.x,r.y); ctx.lineTo(r.x+r.xs,r.y+r.l); ctx.stroke(); r.x+=r.xs; r.y+=r.ys; if(r.y>h||r.x>w||r.x<0){ r.x=Math.random()*w; r.y=-18; } } requestAnimationFrame(draw); }
          addEventListener('resize', ()=>{ resize(); make(); });
          resize(); make(); requestAnimationFrame(draw);
          document.addEventListener('xirox:introDone', ()=> running=false);
        })();
    </script>

    <!-- Intro glue -->
    <script>
        (function(){
          const root=document.body, overlay=document.getElementById('intro-overlay'), introText=document.querySelector('#intro-xirox span'), target=document.getElementById('target-xirox-title');
          if(!introText||!target||!overlay){ root.classList.add('intro-done'); return; }
          introText.style.opacity=0; introText.style.transform='translateY(-100px) scale(1.5) rotate(-15deg)';
          setTimeout(()=>{ introText.style.transition='all 1.2s cubic-bezier(.42,1.7,.3,.97)'; introText.style.opacity=1; introText.style.transform='translateY(0) scale(1) rotate(0deg)'; },300);
          setTimeout(()=>{
            const t=target.getBoundingClientRect(), i=introText.getBoundingClientRect();
            const dx=(t.left+t.width/2)-(i.left+i.width/2), dy=(t.top+t.height/2)-(i.top+i.height/2);
            introText.style.transition='transform 1.25s cubic-bezier(.7,1.6,.25,1), opacity 1.2s';
            introText.style.transform = `translate(${dx}px, ${dy}px) scale(.8) rotate(360deg)`;
            introText.style.opacity='.5';
            setTimeout(()=>{ root.classList.add('intro-done'); overlay.setAttribute('aria-hidden','true'); document.dispatchEvent(new CustomEvent('xirox:introDone')); setTimeout(()=>overlay.remove(),900); },1200);
          },1900);
        })();
    </script>

    <!-- Typed hero line -->
    <script>
        (function(){
          const el=document.getElementById('typed-line'); if(!el) return;
          const lines=["Digital Creator.","Gamer.","Let’s build awesome things."];
          let li=0,i=0,dir=1;
          function tick(){
            const s=lines[li]; el.textContent=s.slice(0,i); i+=dir;
            if(i>s.length+8) dir=-1;
            if(i<=0){ dir=1; li=(li+1)%lines.length; }
            setTimeout(tick, dir>0?42:24);
          }
          tick();
        })();
    </script>

    <!-- Tilt / Ripple / Metrics + Voting + Uptime / Palette / Title typing -->
    <script>
        (function(){
          // Tilt
          document.querySelectorAll('[data-tilt]').forEach(card=>{
            const strength=12,damp=14; let rx=0,ry=0,tx=0,ty=0,af;
            function anim(){ rx+=(tx-rx)/damp; ry+=(ty-ry)/damp; card.style.transform=`perspective(700px) rotateX(${rx}deg) rotateY(${ry}deg) translateY(-3px)`; af=requestAnimationFrame(anim); }
            function enter(){ cancelAnimationFrame(af); af=requestAnimationFrame(anim); }
            function leave(){ tx=ty=0; setTimeout(()=>cancelAnimationFrame(af),240); }
            function move(e){ const r=card.getBoundingClientRect(), cx=r.left+r.width/2, cy=r.top+r.height/2; const dx=(e.clientX-cx)/(r.width/2), dy=(e.clientY-cy)/(r.height/2); ty=(-dx)*strength; tx=(dy)*strength; }
            card.addEventListener('mouseenter', enter);
            card.addEventListener('mousemove', move);
            card.addEventListener('mouseleave', leave);
          });

          // Ripple
          addEventListener('click', function(e){
            const t=e.target.closest('.btn, .social-link, .vote-btn'); if(!t) return;
            const r=document.createElement('span'); r.className='ripple';
            const rect=t.getBoundingClientRect(), size=Math.max(rect.width, rect.height);
            r.style.width=r.style.height=size+'px'; r.style.left=(e.clientX-rect.left-size/2)+'px'; r.style.top=(e.clientY-rect.top-size/2)+'px';
            t.appendChild(r); setTimeout(()=>r.remove(),600);
          }, {passive:true});

          // ===== Metrics / Voting / Uptime =====
          const $=(s,c=document)=>c.querySelector(s);
          const rollTo=(el,val,prefix='')=>{
            const newText=(prefix?prefix:'')+val.toLocaleString();
            const old=el.textContent.trim();
            if(old===newText){ el.textContent=newText; return; }
            const wrap=document.createElement('span'); wrap.className='roller-wrap';
            const a=document.createElement('span'); a.className='roller curr'; a.textContent=old||(prefix+'0');
            const b=document.createElement('span'); b.className='roller next'; b.textContent=newText;
            wrap.appendChild(a); wrap.appendChild(b); el.innerHTML=''; el.appendChild(wrap);
            requestAnimationFrame(()=>wrap.classList.add('roll'));
            wrap.addEventListener('animationend', ()=>{ el.textContent=newText; }, {once:true});
          };
          const burst=(el,text,kind)=>{
            const s=document.createElement('span'); s.className='burst '+(kind||'up'); s.textContent=text;
            const r=el.getBoundingClientRect(); s.style.left=(r.left+r.width/2)+'px'; s.style.top=(r.top+r.height/2)+'px';
            document.body.appendChild(s); setTimeout(()=>s.remove(),700);
          };

          const rollVisits=$('#visits-roller'), rollUp=$('#up-roller'), rollDown=$('#down-roller');
          const btnLike=$('#btn-like'), btnDislike=$('#btn-dislike');
          const face=$('#face-emoji');
          const ageY=$('#age-years'), ageM=$('#age-months'), ageD=$('#age-days'), ageH=$('#age-hours'), ageMin=$('#age-mins'), ageS=$('#age-secs');

          const API={
            visit: ()=>fetch('/api/metrics/visit',{method:'POST'}).then(r=>r.json()),
            state: ()=>fetch('/api/metrics/state',{cache:'no-store'}).then(r=>r.json()),
            voteSet:(prev,next)=>fetch(`/api/metrics/vote?prev=${prev}&next=${next}`,{method:'POST'}).then(r=>r.json())
          };

          function diffYMDHMS(from,to){
            let y=to.getFullYear()-from.getFullYear(); let base=new Date(from); base.setFullYear(from.getFullYear()+y); if(base>to){ y--; base.setFullYear(base.getFullYear()-1); }
            let m=(to.getFullYear()-base.getFullYear())*12+(to.getMonth()-base.getMonth()); base.setMonth(base.getMonth()+m); if(base>to){ m--; base.setMonth(base.getMonth()-1); }
            let ms=to-base; const d=Math.floor(ms/86400000); ms-=d*86400000; const h=Math.floor(ms/3600000); ms-=h*3600000; const min=Math.floor(ms/60000); ms-=min*60000; const s=Math.floor(ms/1000);
            return {y,m,d,h,min,s};
          }

          let launchedAt=null;
          function setFaceState(happy){ if(happy){ face.classList.remove('sad'); } else { face.classList.add('sad'); } }
          function pulseFace(){ face.classList.add('pulse'); setTimeout(()=>face.classList.remove('pulse'), 500); }
          function paintAll(s){
            const visits=s.totalVisits ?? s.TotalVisits ?? 0;
            const up =s.positiveFeedback ?? s.PositiveFeedback ?? 0;
            const down =s.negativeFeedback ?? s.NegativeFeedback ?? 0;
            launchedAt =new Date(s.launchedAt ?? s.LaunchedAt ?? new Date());
            rollTo(rollVisits, visits); rollTo(rollUp, up, '+'); rollTo(rollDown, -down);
            setFaceState(up > down);
            const now=new Date(); const {y,m,d,h,min,s:sec}=diffYMDHMS(launchedAt, now);
            ageY.textContent=y; ageM.textContent=m; ageD.textContent=d; ageH.textContent=h; ageMin.textContent=min; ageS.textContent=sec;
          }

          // live uptime
          setInterval(()=>{ if(!launchedAt) return; const now=new Date(); const {y,m,d,h,min,s}=diffYMDHMS(launchedAt, now);
            ageY.textContent=y; ageM.textContent=m; ageD.textContent=d; ageH.textContent=h; ageMin.textContent=min; ageS.textContent=s;
          },1000);

          // first paint + poll
          API.visit().then(paintAll).catch(()=>{});
          setInterval(()=>{ API.state().then(paintAll).catch(()=>{}); },15000);

          // device-limited voting
          const KEY='xirox:vote:v1';
          const read=()=>localStorage.getItem(KEY)||'none';
          const save=v=>localStorage.setItem(KEY,v);
          const apply=()=>{ const v=read(); btnLike.classList.toggle('active', v==='up'); btnDislike.classList.toggle('active', v==='down'); };
          apply();

          function nextState(clicked){
            const prev=read(); if(prev===clicked) return {prev, next:'none'}; // toggle off
            return {prev, next:clicked};
          }

          btnLike?.addEventListener('click', ()=>{
            const {prev,next}=nextState('up');
            btnLike.disabled=btnDislike.disabled=true;
            API.voteSet(prev,next).then(s=>{ paintAll(s); save(next); apply(); setFaceState(true); pulseFace(); burst(btnLike,'+1','up'); })
              .finally(()=>{ btnLike.disabled=btnDislike.disabled=false; });
          });

          btnDislike?.addEventListener('click', ()=>{
            const {prev,next}=nextState('down');
            btnLike.disabled=btnDislike.disabled=true;
            API.voteSet(prev,next).then(s=>{ paintAll(s); save(next); apply(); setFaceState(false); pulseFace(); burst(btnDislike,'-1','down'); })
              .finally(()=>{ btnLike.disabled=btnDislike.disabled=false; });
          });

          // Command palette + title typing
          const root=document.getElementById('cmdk'), input=document.getElementById('cmdk-input'), list=document.getElementById('cmdk-list');
          function open(){ root.setAttribute('aria-hidden','false'); input.value=''; input.focus(); filter(''); }
          function close(){ root.setAttribute('aria-hidden','true'); input.blur(); }
          function filter(q){
            const t=q.toLowerCase();
            [...list.children].forEach(li=>li.style.display=li.textContent.toLowerCase().includes(t)?'block':'none');
            const first=[...list.querySelectorAll('li')].find(li=>li.style.display!=='none');
            [...list.children].forEach(li=>li.classList.remove('cmdk-active'));
            if(first) first.classList.add('cmdk-active');
          }
          addEventListener('keydown',(e)=>{
            if((e.ctrlKey||e.metaKey)&&e.key.toLowerCase()==='k'){ e.preventDefault(); open(); }
            if(e.key==='Escape'&&root.getAttribute('aria-hidden')==='false') close();
            if(root.getAttribute('aria-hidden')==='false'){
              const a=list.querySelector('.cmdk-active');
              if(e.key==='ArrowDown'){
                e.preventDefault();
                let n=a?.nextElementSibling; while(n&&n.style.display==='none') n=n.nextElementSibling;
                if(n){a?.classList.remove('cmdk-active'); n.classList.add('cmdk-active');}
              }
              if(e.key==='ArrowUp'){
                e.preventDefault();
                let p=a?.previousElementSibling; while(p&&p.style.display==='none') p=p.previousElementSibling;
                if(p){a?.classList.remove('cmdk-active'); p.classList.add('cmdk-active');}
              }
              if(e.key==='Enter'){ e.preventDefault(); a?.click(); }
            }
          });
          input?.addEventListener('input', e=>filter(e.target.value));
          root?.addEventListener('click', e=>{ if(e.target===root) close(); });

          (function(){
            const fullTitle="Welcome to the X I R O X website";
            let i=0, d=150, p=1100;
            function type(){
              if(i<=fullTitle.length){ document.title=fullTitle.substring(0,i); i++; setTimeout(type,d); }
              else { setTimeout(()=>{ i=0; type(); }, p); }
            }
            type();
          })();
        })();
    </script>
}
<script id="xirox-metrics-boot">
(function(){
  const key='xiroxVote';
  function $(s){try{return document.querySelector(s)}catch(e){return null}}
  function set(el,val){ if(!el) return; el.textContent=String(val); }
  function happyFace(s){ return (s.positiveFeedback>=s.negativeFeedback); }
  async function loadState(){
    try{
      const r = await fetch('/api/metrics/state'); const s = await r.json();
      set(document.getElementById('totalVisits'), s.totalVisits);
      set(document.getElementById('likeCount'), s.positiveFeedback);
      set(document.getElementById('dislikeCount'), s.negativeFeedback);
      const face = document.getElementById('faceEmoji')||$('.face-emoji,.emoji-face,.satisfaction-face');
      if(face){ face.setAttribute('data-state', happyFace(s)?'happy':'sad'); face.textContent = happyFace(s)?'😊':'☹️'; }
      window.__xiroxLaunch = new Date(s.launchedAt+"Z");
    }catch(e){}
  }
  async function sendVote(next){
    try{
      const prev = localStorage.getItem(key)||'none';
      const r = await fetch(`/api/metrics/vote?prev=${prev}&next=${next}`,{method:'POST'});
      const s = await r.json();
      localStorage.setItem(key,next);
      set(document.getElementById('likeCount'), s.positiveFeedback);
      set(document.getElementById('dislikeCount'), s.negativeFeedback);
      const face = document.getElementById('faceEmoji')||$('.face-emoji,.emoji-face,.satisfaction-face');
      if(face){ face.setAttribute('data-state', happyFace(s)?'happy':'sad'); face.textContent = happyFace(s)?'😊':'☹️'; }
    }catch(e){}
  }
  // visit++
  try{ fetch('/api/metrics/visit',{method:'POST'}); }catch(e){}
  // bind buttons (compatible selectors)
  const likeBtn = document.getElementById('btnLike')||$('[aria-label="Like"],[title="Like"],.like-btn,.fa-thumbs-up,.icon-like');
  const dislikeBtn = document.getElementById('btnDislike')||$('[aria-label="Dislike"],[title="Dislike"],.dislike-btn,.fa-thumbs-down,.icon-dislike');
  if(likeBtn){ likeBtn.addEventListener('click', e=>{e.preventDefault(); sendVote('up');}); }
  if(dislikeBtn){ dislikeBtn.addEventListener('click', e=>{e.preventDefault(); sendVote('down');}); }
  // uptime ticker
  function tick(){
    const la = window.__xiroxLaunch; if(!la) return;
    let s = Math.floor((Date.now()-la.getTime())/1000); if(s<0) s=0;
    const y = Math.floor(s/31536000); s-=y*31536000;
    const m = Math.floor(s/2592000);  s-=m*2592000;
    const d = Math.floor(s/86400);    s-=d*86400;
    const h = Math.floor(s/3600);     s-=h*3600;
    const mi= Math.floor(s/60);       s-=mi*60;
    set(document.getElementById('uptimeYears')   || $('[data-uptime="years"]') , y);
    set(document.getElementById('uptimeMonths')  || $('[data-uptime="months"]'), m);
    set(document.getElementById('uptimeDays')    || $('[data-uptime="days"]')  , d);
    set(document.getElementById('uptimeHours')   || $('[data-uptime="hours"]') , h);
    set(document.getElementById('uptimeMinutes') || $('[data-uptime="mins"]')  , mi);
    set(document.getElementById('uptimeSeconds') || $('[data-uptime="secs"]')  , s);
  }
  loadState(); setInterval(tick,1000);
})();
</script>